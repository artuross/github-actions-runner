// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/artuross/github-actions-runner/internal/commands/run/workflowsteps"
	"github.com/artuross/github-actions-runner/internal/repository/resultsreceiver"
)

type FakeResultsReceiver struct {
	UpdateWorkflowStepsStub        func(context.Context, int, string, string, []resultsreceiver.Step) error
	updateWorkflowStepsMutex       sync.RWMutex
	updateWorkflowStepsArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 string
		arg4 string
		arg5 []resultsreceiver.Step
	}
	updateWorkflowStepsReturns struct {
		result1 error
	}
	updateWorkflowStepsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResultsReceiver) UpdateWorkflowSteps(arg1 context.Context, arg2 int, arg3 string, arg4 string, arg5 []resultsreceiver.Step) error {
	var arg5Copy []resultsreceiver.Step
	if arg5 != nil {
		arg5Copy = make([]resultsreceiver.Step, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.updateWorkflowStepsMutex.Lock()
	ret, specificReturn := fake.updateWorkflowStepsReturnsOnCall[len(fake.updateWorkflowStepsArgsForCall)]
	fake.updateWorkflowStepsArgsForCall = append(fake.updateWorkflowStepsArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 string
		arg4 string
		arg5 []resultsreceiver.Step
	}{arg1, arg2, arg3, arg4, arg5Copy})
	stub := fake.UpdateWorkflowStepsStub
	fakeReturns := fake.updateWorkflowStepsReturns
	fake.recordInvocation("UpdateWorkflowSteps", []interface{}{arg1, arg2, arg3, arg4, arg5Copy})
	fake.updateWorkflowStepsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeResultsReceiver) UpdateWorkflowStepsCallCount() int {
	fake.updateWorkflowStepsMutex.RLock()
	defer fake.updateWorkflowStepsMutex.RUnlock()
	return len(fake.updateWorkflowStepsArgsForCall)
}

func (fake *FakeResultsReceiver) UpdateWorkflowStepsCalls(stub func(context.Context, int, string, string, []resultsreceiver.Step) error) {
	fake.updateWorkflowStepsMutex.Lock()
	defer fake.updateWorkflowStepsMutex.Unlock()
	fake.UpdateWorkflowStepsStub = stub
}

func (fake *FakeResultsReceiver) UpdateWorkflowStepsArgsForCall(i int) (context.Context, int, string, string, []resultsreceiver.Step) {
	fake.updateWorkflowStepsMutex.RLock()
	defer fake.updateWorkflowStepsMutex.RUnlock()
	argsForCall := fake.updateWorkflowStepsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeResultsReceiver) UpdateWorkflowStepsReturns(result1 error) {
	fake.updateWorkflowStepsMutex.Lock()
	defer fake.updateWorkflowStepsMutex.Unlock()
	fake.UpdateWorkflowStepsStub = nil
	fake.updateWorkflowStepsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResultsReceiver) UpdateWorkflowStepsReturnsOnCall(i int, result1 error) {
	fake.updateWorkflowStepsMutex.Lock()
	defer fake.updateWorkflowStepsMutex.Unlock()
	fake.UpdateWorkflowStepsStub = nil
	if fake.updateWorkflowStepsReturnsOnCall == nil {
		fake.updateWorkflowStepsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateWorkflowStepsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResultsReceiver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateWorkflowStepsMutex.RLock()
	defer fake.updateWorkflowStepsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResultsReceiver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ workflowsteps.ResultsReceiver = new(FakeResultsReceiver)
